{
  "code" : "io.liquichain.communication.LiquichainWSExchange",
  "description" : "Liquichain Websocket exchange",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.communication;\r\n\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport javax.websocket.Session;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.meveo.service.technicalservice.wsendpoint.WebsocketServerEndpoint;\r\n\r\nimport javax.enterprise.context.ApplicationScoped;\r\n\r\npublic class LiquichainWSExchange extends Script {\r\n  \r\n    private static final Logger log = LoggerFactory.getLogger(LiquichainWSExchange.class);\r\n  \r\n    private ObjectMapper mapper = new ObjectMapper();\r\n  \r\n    private Session session;\r\n\t\r\n    private WebsocketServerEndpoint websocketServerEndpoint = getCDIBean(WebsocketServerEndpoint.class);;\r\n\t@Override\r\n\tpublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n\t  log.info(\"params:{}\",parameters);\r\n      session = (Session) parameters.get(\"WS_SESSION\");\r\n      String wsEvent = (String) parameters.get(\"WS_EVENT\");\r\n\t  log.info(\"wsEvent:{}\",wsEvent);\r\n      switch (wsEvent) {\r\n        case \"open\" : onOpen(parameters);\r\n          break;\r\n        case \"message\" : onMessage(parameters);\r\n          break;\r\n      }\r\n\t}\r\n  \r\n    public void onOpen(Map<String, Object> parameters) throws BusinessException {\r\n      log.info(\"onOpen\");\r\n    }\r\n  \r\n    public void onMessage(Map<String, Object> parameters) throws BusinessException {\r\n      String message  = (String) parameters.get(\"WS_MESSAGE\");\r\n      Map<String, Object> map = null;\r\n      try{\r\n      \t map = mapper.readValue(message, Map.class);\r\n      } catch(Exception e){\r\n        throw new BusinessException(e);\r\n      }\r\n      String action = (String)map.get(\"action\");\r\n      log.info(\"action: {}\",action);\r\n      switch(action){\r\n           case(\"register\"):\r\n                register(map,parameters);\r\n                break;\r\n           case(\"message\"):\r\n                sendMessage(map,parameters);\r\n                break;\r\n      }\r\n    }\r\n\t\r\n    public void register(Map<String, Object> message,Map<String, Object> parameters) throws BusinessException {\r\n      String account = (String)message.get(\"account\");\r\n      //TODO: verify signature\r\n      session.getUserProperties().put(\"username\", account);\r\n    }\r\n  \r\n  \r\n    public void sendMessage(Map<String, Object> message,Map<String, Object> parameters) throws BusinessException {\r\n      String destination = (String)message.get(\"to\");\r\n      String txtMessage = (String)message.get(\"message\");\r\n      //TODO: verify signature\r\n      log.info(\"sendMessage {} {}\",destination,txtMessage);\r\n      websocketServerEndpoint.sendMessage(\"liquichain\", destination, txtMessage);\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}