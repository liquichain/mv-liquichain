{
  "code" : "io.liquichain.api.core.LiquichainTransaction",
  "description" : "perform transaction from internal accounts",
  "inputs" : [ {
    "name" : "fromAddress",
    "type" : "String"
  }, {
    "name" : "toAddress",
    "type" : "String"
  }, {
    "name" : "value",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.core;\n\nimport static org.web3j.protocol.core.DefaultBlockParameterName.LATEST;\n\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.math.BigInteger;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Collections;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.customEntities.Transaction;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.persistence.CrossStorageService;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\nimport javax.ws.rs.ext.*;\n\nimport org.web3j.abi.datatypes.Address;\nimport org.web3j.abi.datatypes.Bool;\nimport org.web3j.abi.datatypes.Function;\nimport org.web3j.abi.datatypes.generated.Uint256;\nimport org.web3j.abi.FunctionEncoder;\nimport org.web3j.abi.TypeReference;\nimport org.web3j.crypto.Credentials;\nimport org.web3j.crypto.Hash;\nimport org.web3j.crypto.RawTransaction;\nimport org.web3j.crypto.TransactionEncoder;\nimport org.web3j.protocol.Web3j;\nimport org.web3j.protocol.core.methods.response.EthEstimateGas;\nimport org.web3j.protocol.core.methods.response.EthGetBalance;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount;\nimport org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\nimport org.web3j.protocol.core.methods.response.TransactionReceipt;\nimport org.web3j.protocol.exceptions.ClientConnectionException;\nimport org.web3j.protocol.Service;\nimport org.web3j.tx.RawTransactionManager;\nimport org.web3j.utils.Convert;\nimport org.web3j.utils.Convert.Unit;\nimport org.web3j.utils.Numeric;\n\nimport io.liquichain.core.BlockForgerScript;\n\npublic class LiquichainTransaction extends Script {\n    private static final Logger log = LoggerFactory.getLogger(LiquichainTransaction.class);\n    private static final long LIQUICHAIN_CHAINID = 76l;\n    private static final int SLEEP_DURATION = 15000;\n    private static final int ATTEMPTS = 40;\n    private static final String INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    private static final String TRANSACTION_FAILED = \"Transaction failed\";\n\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n    private ParamBean config = paramBeanFactory.getInstance();\n    private String besuApiUrl = config\n            .getProperty(\"besu.api.url\", \"https://testnet.liquichain.io/rpc\");\n    private BigInteger defaultGasLimit =\n            new BigInteger(config.getProperty(\"besu.gas.limit\", \"21000\"));\n    private BigInteger defaultGasPrice = new BigInteger(config.getProperty(\"besu.gas.price\", \"0\"));\n    private String smartContract = config\n            .getProperty(\"besu.smart.contract\", \"0x0Cd07348D582a6F4A3641D3192f1f467586BE990\");\n\n    private Web3j web3j = Web3j.build(new HttpService(besuApiUrl));\n\n    private enum BLOCKCHAIN_TYPE {\n        DATABASE, BESU, FABRIC, SMART_CONTRACT, BESU_DB\n    }\n\n    private String blockchainType = config.getProperty(\"txn.blockchain.type\", \"BESU\");\n    private BLOCKCHAIN_TYPE BLOCKCHAIN_BACKEND = BLOCKCHAIN_TYPE.valueOf(blockchainType);\n\n    private String fromAddress;\n    private String toAddress;\n    private String value;\n    private String result;\n\n    public void setFromAddress(String fromAddress) {\n        this.fromAddress = fromAddress;\n    }\n\n    public void setToAddress(String toAddress) {\n        this.toAddress = toAddress;\n    }\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n\n    public String getResult() {\n        return result;\n    }\n\n    private String normalizeHash(String hash) {\n        if (hash.startsWith(\"0x\")) {\n            return hash.substring(2);\n        }\n        return hash;\n    }\n\n    private String toHexHash(String hash) {\n        if (hash.startsWith(\"0x\")) {\n            return hash;\n        }\n        return \"0x\" + hash;\n    }\n\n    private Optional<TransactionReceipt> sendTransactionReceiptRequest(String transactionHash)\n            throws Exception {\n        EthGetTransactionReceipt transactionReceipt = web3j\n                .ethGetTransactionReceipt(transactionHash)\n                .sendAsync()\n                .get();\n\n        return transactionReceipt.getTransactionReceipt();\n    }\n\n    private Optional<TransactionReceipt> getTransactionReceipt(String transactionHash,\n            int sleepDuration, int attempts) throws Exception {\n        Optional<TransactionReceipt> receiptOptional =\n                sendTransactionReceiptRequest(transactionHash);\n        for (int i = 0; i < attempts; i++) {\n            if (!receiptOptional.isPresent()) {\n                Thread.sleep(sleepDuration);\n                receiptOptional = sendTransactionReceiptRequest(transactionHash);\n            } else {\n                break;\n            }\n        }\n        return receiptOptional;\n    }\n\n    private TransactionReceipt waitForTransactionReceipt(String transactionHash) throws Exception {\n        Optional<TransactionReceipt> transactionReceiptOptional =\n                getTransactionReceipt(transactionHash, SLEEP_DURATION, ATTEMPTS);\n\n        if (!transactionReceiptOptional.isPresent()) {\n            throw new BusinessException(\n                    \"Transaction receipt not generated after \" + ATTEMPTS + \" attempts\");\n        }\n        return transactionReceiptOptional.get();\n    }\n\n    private void updateWalletBalances(String from, String to) throws Exception {\n        Wallet fromWallet = crossStorageApi.find(defaultRepo, from, Wallet.class);\n        Wallet toWallet = crossStorageApi.find(defaultRepo, to, Wallet.class);\n\n        EthGetBalance toBalance = web3j.ethGetBalance(to, LATEST).sendAsync().get();\n        EthGetBalance fromBalance = web3j.ethGetBalance(from, LATEST).sendAsync().get();\n\n        fromWallet.setBalance(fromBalance.getBalance().toString());\n        toWallet.setBalance(toBalance.getBalance().toString());\n        crossStorageApi.createOrUpdate(defaultRepo, fromWallet);\n        crossStorageApi.createOrUpdate(defaultRepo, toWallet);\n    }\n\n    private String transferDB(String from, String to, BigInteger amount, String type,\n            String description) throws Exception {\n        String transactionHash = \"\";\n        Wallet toWallet = crossStorageApi.find(defaultRepo, to, Wallet.class);\n        Wallet fromWallet = crossStorageApi.find(defaultRepo, from, Wallet.class);\n        if (fromWallet.getPrivateKey() == null) {\n            throw new Exception(\"wallet has no private key\");\n        }\n        String privateKey = normalizeHash(fromWallet.getPrivateKey());\n\n        BigInteger originBalance = new BigInteger(fromWallet.getBalance());\n        if (amount.compareTo(originBalance) > 0) {\n            throw new BusinessException(INSUFFICIENT_BALANCE);\n        }\n\n        List<Transaction> walletTransactions = crossStorageApi.find(defaultRepo, Transaction.class)\n                .by(\"fromHexHash\", fromWallet.getUuid()).getResults();\n        BigInteger nonce = BigInteger.ONE;\n        if (walletTransactions != null && walletTransactions.size() > 0) {\n\t\t\t\n            Collections.sort(walletTransactions, new Comparator<Transaction>() {\n              @Override\n              public int compare(Transaction lhs, Transaction rhs) {\n                  if (Long.parseLong(lhs.getNonce())<=Long.parseLong(rhs.getNonce())){\n                      return 1;\n                  }\n                  return -1;\n              }\n          \t});\n\t\t\t\n            Transaction lastTransaction = walletTransactions.get(0);\n            try {\n                nonce = BigInteger.valueOf(Long.parseLong(lastTransaction.getNonce()) + 1);\n            } catch (Exception e) {\n                log.error(\"invalid nonce :{}\", lastTransaction.getNonce());\n            }\n        }\n        String recipientAddress = \"0x\" + toWallet.getUuid();\n        String data = String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"description\\\":\\\"%s\\\"\", type, description);\n        BigInteger gasLimit = BigInteger.ZERO;\n        BigInteger gasPrice = BigInteger.ZERO;\n        RawTransaction rawTransaction = RawTransaction\n                .createTransaction(nonce, gasPrice, gasLimit, recipientAddress, amount, data);\n        Credentials credentials = Credentials.create(privateKey);\n        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);\n        String encodedTransaction = Numeric.toHexString(signedMessage);\n\n        Transaction transaction = new Transaction();\n        transactionHash = Hash.sha3(encodedTransaction);\n        transaction.setHexHash(normalizeHash(transactionHash));\n        transaction.setFromHexHash(fromWallet.getUuid());\n        transaction.setToHexHash(toWallet.getUuid());\n        transaction.setNonce(\"\" + nonce);\n        transaction.setGasPrice(gasPrice.toString());\n        transaction.setGasLimit(gasLimit.toString());\n        transaction.setValue(amount.toString());\n        transaction.setData(data);\n        transaction.setSignedHash(normalizeHash(encodedTransaction));\n        transaction.setCreationDate(java.time.Instant.now());\n\n        crossStorageApi.createOrUpdate(defaultRepo, transaction);\n\n        // FIXME: you should get the BlockForgerScript from scriptService\n        BlockForgerScript.addTransaction(transaction);\n\n        return transactionHash;\n    }\n\n    private String transferBesu(String from, String to, BigInteger amount,\n            String type, String description) throws Exception {\n        Wallet fromWallet = crossStorageApi.find(defaultRepo, from, Wallet.class);\n        String privateKey = fromWallet.getPrivateKey();\n        BigInteger balance = BigInteger.ZERO;\n\n        if (fromWallet.getBalance() == null || fromWallet.getBalance().isEmpty()) {\n            balance = web3j.ethGetBalance(from, LATEST).sendAsync().get().getBalance();\n\n        } else {\n            balance = new BigInteger(fromWallet.getBalance());\n        }\n\n        if (balance.compareTo(amount) < 0) {\n            throw new BusinessException(INSUFFICIENT_BALANCE);\n        }\n\n        Credentials credentials = Credentials.create(privateKey);\n        EthGetTransactionCount ethGetTransactionCount = web3j\n                .ethGetTransactionCount(credentials.getAddress(), LATEST)\n                .send();\n        BigInteger nonce = ethGetTransactionCount.getTransactionCount();\n\n        org.web3j.protocol.core.methods.request.Transaction transaction =\n                org.web3j.protocol.core.methods.request.Transaction\n                        .createEtherTransaction(from, nonce, defaultGasPrice,\n                                defaultGasLimit, to, amount);\n\n        BigInteger estimatedGas = web3j.ethEstimateGas(transaction).send().getAmountUsed();\n        log.debug(\"estimatedGas: {}\", estimatedGas);\n        BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();\n        log.debug(\"gasPrice: {}\", gasPrice);\n\n        RawTransaction rawTransaction = RawTransaction\n                .createEtherTransaction(nonce, gasPrice, defaultGasLimit, to, amount);\n\n        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);\n        String encodedTransaction = Numeric.toHexString(signedMessage);\n\n        EthSendTransaction ethSendTransaction = web3j\n                .ethSendRawTransaction(encodedTransaction)\n                .sendAsync()\n                .get();\n\n        String transactionHash = ethSendTransaction.getTransactionHash();\n        log.debug(\"pending transactionHash: {}\", transactionHash);\n\n        if (transactionHash == null || transactionHash.isEmpty()) {\n            throw new BusinessException(TRANSACTION_FAILED);\n        }\n\n        TransactionReceipt transactionReceipt = waitForTransactionReceipt(transactionHash);\n\n        String completedTransactionHash = transactionReceipt.getTransactionHash();\n        log.debug(\"completed transactionHash: {}\", completedTransactionHash);\n\n        updateWalletBalances(from, to);\n\n        return completedTransactionHash;\n    }\n\n    private String transferBesuDB(String from, String to, BigInteger amount,\n            String type, String description) throws Exception {\n\n        Wallet fromWallet = crossStorageApi.find(defaultRepo, from, Wallet.class);\n        Wallet toWallet = crossStorageApi.find(defaultRepo, to, Wallet.class);\n\n        String privateKey = fromWallet.getPrivateKey();\n        BigInteger balance = BigInteger.ZERO;\n\n        if (fromWallet.getBalance() == null || fromWallet.getBalance().isEmpty()) {\n            balance = web3j.ethGetBalance(from, LATEST).sendAsync().get().getBalance();\n\n        } else {\n            balance = new BigInteger(fromWallet.getBalance());\n        }\n\n        if (balance.compareTo(amount) < 0) {\n            throw new BusinessException(INSUFFICIENT_BALANCE);\n        }\n\n        Credentials credentials = Credentials.create(privateKey);\n        EthGetTransactionCount ethGetTransactionCount = web3j\n                .ethGetTransactionCount(credentials.getAddress(), LATEST)\n                .send();\n        BigInteger nonce = ethGetTransactionCount.getTransactionCount();\n\n        BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();\n        log.debug(\"gasPrice: {}\", gasPrice);\n\n        RawTransaction rawTransaction = RawTransaction\n                .createEtherTransaction(nonce, gasPrice, defaultGasLimit, to, amount);\n\n        byte[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);\n        String encodedTransaction = Numeric.toHexString(signedMessage);\n\n        EthSendTransaction ethSendTransaction = web3j\n                .ethSendRawTransaction(encodedTransaction)\n                .sendAsync()\n                .get();\n\n        String transactionHash = ethSendTransaction.getTransactionHash();\n        log.debug(\"pending transactionHash: {}\", transactionHash);\n\n        if (transactionHash == null || transactionHash.isEmpty()) {\n            throw new BusinessException(TRANSACTION_FAILED);\n        }\n\n        TransactionReceipt transactionReceipt = waitForTransactionReceipt(transactionHash);\n\n        String completedTransactionHash = transactionReceipt.getTransactionHash();\n        log.debug(\"completed transactionHash: {}\", completedTransactionHash);\n\n        String data = String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"description\\\":\\\"%s\\\"\", type, description);\n\n        Transaction transaction = new Transaction();\n        transaction.setHexHash(normalizeHash(completedTransactionHash));\n        transaction.setFromHexHash(fromWallet.getUuid());\n        transaction.setToHexHash(toWallet.getUuid());\n        transaction.setNonce(\"\" + nonce);\n        transaction.setGasPrice(gasPrice.toString());\n        transaction.setGasLimit(defaultGasLimit.toString());\n        transaction.setValue(amount.toString());\n        transaction.setData(data);\n        transaction.setSignedHash(normalizeHash(encodedTransaction));\n        transaction.setCreationDate(java.time.Instant.now());\n\n        crossStorageApi.createOrUpdate(defaultRepo, transaction);\n\n        updateWalletBalances(from, to);\n\n        return completedTransactionHash;\n    }\n\n    private String transferSmartContract(String from, String to, BigInteger amount,\n            String type, String description) throws Exception {\n        String sender = normalizeHash(from);\n        String recipient = normalizeHash(to);\n\n        Wallet fromWallet = crossStorageApi.find(defaultRepo, sender, Wallet.class);\n        String privateKey = fromWallet.getPrivateKey();\n        Credentials credentials = Credentials.create(privateKey);\n        BigInteger balance = BigInteger.ZERO;\n\n        if (fromWallet.getBalance() == null || fromWallet.getBalance().isEmpty()) {\n            balance = web3j.ethGetBalance(from, LATEST).sendAsync().get().getBalance();\n        } else {\n            balance = new BigInteger(fromWallet.getBalance());\n        }\n\n        if (balance.compareTo(amount) < 0) {\n            throw new BusinessException(INSUFFICIENT_BALANCE);\n        }\n\n        RawTransactionManager manager = new RawTransactionManager(web3j, credentials);\n        Function function = new Function(\n                \"transferFrom\",\n                Arrays.asList(new Address(from), new Address(to), new Uint256(amount)),\n                Arrays.asList(new TypeReference<Bool>() {}));\n        String data = FunctionEncoder.encode(function);\n\n        BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();\n        EthSendTransaction transaction = manager.sendTransaction(\n                gasPrice,\n                defaultGasLimit,\n                smartContract,\n                data,\n                null);\n        String transactionHash = transaction.getTransactionHash();\n        log.debug(\"pending transactionHash: {}\", transactionHash);\n\n        if (transactionHash == null || transactionHash.isEmpty()) {\n            throw new BusinessException(TRANSACTION_FAILED);\n        }\n\n        TransactionReceipt transactionReceipt = waitForTransactionReceipt(transactionHash);\n\n        String completedTransactionHash = transactionReceipt.getTransactionHash();\n        log.debug(\"completed transactionHash: {}\", completedTransactionHash);\n\n        updateWalletBalances(sender, recipient);\n\n        return completedTransactionHash;\n    }\n\n    private String transferFabric(String from, String to, BigInteger amount,\n            String type, String description) throws Exception {\n        return \"\";\n    }\n\n    public String transfer(String from, String to, BigInteger amount)\n            throws Exception {\n        String message = String.format(\n                \"You received %s coins !\",\n                Convert.fromWei(amount.toString(), Unit.ETHER));\n        return transfer(from, to, amount, \"transfer\", \"Transfer coins\", message);\n    }\n\n    public String transfer(String from, String to, BigInteger amount, String type,\n            String description, String message) throws Exception {\n        String transactionHash = \"\";\n        String recipientAddress = normalizeHash(to);\n        String senderAddress = normalizeHash(from);\n        switch (BLOCKCHAIN_BACKEND) {\n            case BESU:\n                transactionHash = transferBesu(\n                        senderAddress,\n                        recipientAddress,\n                        amount,\n                        type,\n                        description);\n                break;\n            case FABRIC:\n                transactionHash = transferFabric(\n                        senderAddress,\n                        recipientAddress,\n                        amount,\n                        type,\n                        description);\n                break;\n            case SMART_CONTRACT:\n                transactionHash = transferSmartContract(\n                        from,\n                        to,\n                        amount,\n                        type,\n                        description);\n                break;\n            case BESU_DB:\n                transactionHash = transferBesuDB(\n                        from,\n                        to,\n                        amount,\n                        type,\n                        description);\n                break;\n            default:\n                transactionHash = transferDB(\n                        senderAddress,\n                        recipientAddress,\n                        amount,\n                        type,\n                        description);\n                break;\n        }\n        // TODO - send notification to the user e.g. CloudMessaging\n        // try{\n        // if(!transactionHash.isEmpty()){\n        // cloudMessaging.setUserId(recipientAddress);\n        // cloudMessaging.setTitle(\"Telecel Play\");\n        // cloudMessaging.setBody(message);\n        // cloudMessaging.execute(null);\n        // }\n        // } catch(Exception e){\n        // log.warn(\"cannot send notification to {}:{}\",toAddress,message);\n        // }\n        return transactionHash;\n    }\n\n    // used to transfer from local account\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        String transactionHash = \"\";\n        try {\n            transactionHash = transfer(fromAddress, toAddress, new BigInteger(value));\n            result = \"{\\\"transaction_hash\\\":\\\"\" + transactionHash + \"\\\"}\";\n        } catch (Exception e) {\n            log.error(\"Transfer error\", e);\n            result = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n        }\n    }\n\n}\n\n\nclass HttpService extends Service {\n\n    public static final String DEFAULT_URL = \"http://localhost:8545/\";\n    private static final Logger log = LoggerFactory.getLogger(HttpService.class);\n\n    private Client httpClient;\n    private final String url;\n    private final boolean includeRawResponse;\n    private Map<String, String> headers = new HashMap<>();\n\n    public HttpService(String url, Client httpClient, boolean includeRawResponse) {\n        super(includeRawResponse);\n        this.url = url;\n        this.httpClient = httpClient;\n        this.includeRawResponse = includeRawResponse;\n    }\n\n    public HttpService(Client httpClient, boolean includeRawResponse) {\n        this(DEFAULT_URL, httpClient, includeRawResponse);\n    }\n\n    public HttpService(String url, Client httpClient) {\n        this(url, httpClient, false);\n    }\n\n    public HttpService(String url) {\n        this(url, createHttpClient());\n    }\n\n    public HttpService(String url, boolean includeRawResponse) {\n        this(url, createHttpClient(), includeRawResponse);\n    }\n\n    public HttpService(Client httpClient) {\n        this(DEFAULT_URL, httpClient);\n    }\n\n    public HttpService(boolean includeRawResponse) {\n        this(DEFAULT_URL, includeRawResponse);\n    }\n\n    public HttpService() {\n        this(DEFAULT_URL);\n    }\n\n    private static Client createHttpClient() {\n        return ClientBuilder.newClient();\n    }\n\n    @Override\n    protected InputStream performIO(String request) throws IOException {\n\n        log.debug(\"Request: {}\", request);\n\n        Response response = null;\n        try {\n            response = httpClient.target(url)\n                    .request(MediaType.APPLICATION_JSON)\n                    .headers(convertHeaders())\n                    .post(Entity.json(request));\n        } catch (ClientConnectionException e) {\n            throw new IOException(\"Unable to connect to \" + url, e);\n        }\n\n        if (response.getStatus() != 200) {\n            throw new IOException(\n                    \"Error \" + response.getStatus() + \": \" + response.readEntity(String.class));\n        }\n\n        if (includeRawResponse) {\n            return new BufferedInputStream(response.readEntity(InputStream.class));\n        }\n\n        return new ByteArrayInputStream(response.readEntity(String.class).getBytes());\n    }\n\n    private MultivaluedMap<String, Object> convertHeaders() {\n        MultivaluedMap<String, Object> headers = new MultivaluedHashMap<>();\n        for (Map.Entry<String, String> entry : this.headers.entrySet()) {\n            headers.put(entry.getKey(), Arrays.asList(entry.getValue()));\n        }\n        return headers;\n    }\n\n    public void addHeader(String key, String value) {\n        headers.put(key, value);\n    }\n\n    public void addHeaders(Map<String, String> headersToAdd) {\n        headers.putAll(headersToAdd);\n    }\n\n    public Map<String, String> getHeaders() {\n        return headers;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    @Override\n    public void close() throws IOException {}\n\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.web3j",
    "artifactId" : "crypto",
    "version" : "4.8.9",
    "coordinates" : "org.web3j:crypto:4.8.9"
  } ],
  "importScriptInstances" : [ {
    "code" : "io.liquichain.core.BlockForgerScript",
    "description" : "Bock forging script",
    "inputs" : [ ],
    "outputs" : [ {
      "name" : "lastBlock",
      "type" : "Block"
    } ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package io.liquichain.core;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.time.Instant;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.stream.Collectors;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Block;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.cache.CustomFieldsCacheContainerProvider;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.service.custom.CustomTableService;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.primefaces.model.SortOrder;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class BlockForgerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(BlockForgerScript.class);\r\n  \r\n    private static long chainId=76;\r\n\r\n    private int networkId = 7;\r\n\r\n    static public long blockHeight = 1;\r\n  \r\n    private Block parentBlock=null;\r\n    \r\n    private String exampleBlock = \"{\" +\r\n      \"\\\"difficulty\\\":\\\"0x5\\\",\" +\r\n      \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\r\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" \r\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\r\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\r\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" +\r\n      \"\\\"number\\\":\\\"0x1b4\\\",\" +\r\n      \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \r\n      \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" +\r\n      \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" +\r\n      \"\\\"size\\\":\\\"0x260\\\",\" +\r\n      \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" +\r\n      \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" +\r\n      \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" +\r\n      \"\\\"transactions\\\":[\" + \"],\" + \r\n      \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \r\n      \"\\\"uncles\\\":[  \" + \"]}\";\r\n\r\n      \r\n\tprivate CustomFieldsCacheContainerProvider cetCache = getCDIBean(CustomFieldsCacheContainerProvider.class);\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n    private CustomTableService customTableService = getCDIBean(CustomTableService.class);\r\n    \r\n    private static PaginationConfiguration lastBlockPC = new PaginationConfiguration(\"blockNumber\",SortOrder.DESCENDING);\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    \r\n    private static List<Transaction> currentTransactions = new ArrayList<>();\r\n    private static List<Transaction> nextTransactions = new ArrayList<>();\r\n  \r\n    private static Instant nextBlockDate;\r\n    private static AtomicBoolean isForging = new AtomicBoolean(false);\r\n  \r\n    public static void addTransaction(Transaction t){\r\n      if(isForging.get()){\r\n          nextTransactions.add(t);\r\n      } else {\r\n          currentTransactions.add(t);\r\n      }\r\n    }\r\n  \r\n    public Block getLastBlock(){\r\n        Block result = null;\r\n        try{\r\n            //log.info(\"query : \"+customTableService.getQuery(\"block\", lastBlockPC));\r\n        List<Map<String, Object>> res = crossStorageService.find(defaultRepo, cetCache.getCustomEntityTemplate(\"Block\"), lastBlockPC);\r\n        if(res.size()>0){\r\n            result = CEIUtils.deserialize(res.get(0), Block.class);\r\n            //log.info(\"lastBlock number:{}\",result.getBlockNumber());\r\n        }\r\n        } catch(Exception e){\r\n          log.error(\"getLastBlock:{}\",e);\r\n        }\r\n        return result;\r\n    }\r\n  \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      //log.info(\"execute forging\");\r\n      if(parentBlock==null){\r\n      \t//log.info(\"retreive last block from chain\");\r\n        parentBlock = getLastBlock();\r\n      }\r\n      if(isForging.getAndSet(true)){\r\n         log.error(\"we are already forging\");\r\n         return;\r\n      } \r\n      if(currentTransactions.size()==0){\r\n        //log.info(\"no transaction to forge\");\r\n        blockHeight=parentBlock.getBlockNumber();\r\n        isForging.set(false);\r\n        return;\r\n      } else {\r\n        log.info(\"forging {} transactions\",currentTransactions.size());\r\n        Map<String,Wallet> wallets = new HashMap<>();\r\n        List<Transaction> orderedTransactions = currentTransactions.stream().sorted((t1,t2)->(t1.getCreationDate().compareTo(t2.getCreationDate()))).collect(Collectors.toList());\r\n        \r\n        blockHeight=parentBlock.getBlockNumber()+1;\r\n        \r\n        String transactionHashes=\"\";\r\n        List<Transaction> invalidTransactions = new ArrayList<>();\r\n        for(Transaction t: currentTransactions){\r\n          log.info(\" transaction date : {}\",t.getCreationDate());\r\n          if(!wallets.containsKey(t.getFromHexHash())){\r\n            try{\r\n            \tWallet originWallet = crossStorageApi.find(defaultRepo,t.getFromHexHash(), Wallet.class);\r\n                log.info(\"add originWallet:{} {} to map\",originWallet.getUuid(),originWallet.getBalance());\r\n                wallets.put(t.getFromHexHash(),originWallet);\r\n            } catch(Exception e){\r\n              log.info(\" cannot find origin wallet, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try {\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n          if(t.getBlockNumber() == null){\r\n            Wallet originWallet = wallets.get(t.getFromHexHash());\r\n          \tlog.info(\"originWallet 0x{} old balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n            BigInteger transacValue = new BigInteger(t.getValue());\r\n          \tif(new BigInteger(originWallet.getBalance()).compareTo(transacValue)>=0){\r\n                originWallet.setBalance(\"\"+new BigInteger(originWallet.getBalance()).add(transacValue.negate()));\r\n                try{\r\n            \t\tWallet destinationWallet = crossStorageApi.find(defaultRepo,t.getToHexHash(), Wallet.class);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} old balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n                    destinationWallet.setBalance(\"\"+new BigInteger(destinationWallet.getBalance()).add(transacValue));\r\n          \t\t\tcrossStorageApi.createOrUpdate(defaultRepo, destinationWallet);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} new balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n          \t\t\ttransactionHashes+=t.getHexHash();\r\n                } catch(Exception e){\r\n              \t\tlog.info(\" cannot find destination wallet, set blockNumber to INVALID\");\r\n              \t\tt.setBlockNumber(\"INVALID\");\r\n              \t\ttry{\r\n\t\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n                    } catch(Exception ex){\r\n                \t\tex.printStackTrace();\r\n              \t\t}\r\n              \t\tinvalidTransactions.add(t);\r\n                }\r\n          \t} else {\r\n              log.info(\"insufficient balance, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try{\r\n              \tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n        }\r\n        currentTransactions.removeAll(invalidTransactions);\r\n        Block block =  new Block();\r\n        block.setCreationDate(Instant.now());\r\n        \r\n        //FIXME parent should not be null\r\n        block.setParentHash(parentBlock==null?\"\":parentBlock.getHash());\r\n        block.setSize((long)currentTransactions.size());\r\n        \r\n        //FIXME hash parent hash\r\n        block.setHash(Hash.sha3(transactionHashes).substring(2));\r\n        \r\n        block.setBlockNumber(blockHeight);\r\n        try{\r\n          crossStorageApi.createOrUpdate(defaultRepo, block);\r\n          long i=0;\r\n          for(Transaction t: currentTransactions){\r\n              Wallet originWallet = wallets.get(t.getFromHexHash());\r\n              log.info(\"originWallet 0x{} new balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n              crossStorageApi.createOrUpdate(defaultRepo, originWallet);\r\n              t.setBlockHash(block.getHash());\r\n              t.setBlockNumber(\"\"+block.getBlockNumber());\r\n              t.setTransactionIndex(i++);\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n          }\r\n\r\n          parentBlock=block;\r\n          currentTransactions = nextTransactions;\r\n          nextTransactions = new ArrayList<>();\r\n        } catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n        \r\n        isForging.set(false);\r\n      }\r\n    }\r\n  \r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ {
      "groupId" : "org.web3j",
      "artifactId" : "crypto",
      "version" : "4.8.9",
      "coordinates" : "org.web3j:crypto:4.8.9"
    } ],
    "importScriptInstances" : [ ]
  } ]
}